// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1785.Comp18.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1785.Comp18.Robot;
import org.usfirst.frc1785.Comp18.subsystems.Wrist;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.DemandType;

/**
 *
 */
public class WristU extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public WristU() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.wrist);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	double up=.7;
    	double down=-.7;
    	double stop=0;
    	if(Robot.oi.xbox.getYButtonPressed()==true) {
    		Wrist.wrist.set(ControlMode.PercentOutput, up, DemandType.ArbitraryFeedForward,0);
    	}
    	else if(Robot.oi.xbox.getYButtonReleased()==true) {
    		Wrist.wrist.set(ControlMode.PercentOutput, stop, DemandType.ArbitraryFeedForward,0);
    	}
    	
    	if(Robot.oi.xbox.getBButton()==true) {
    		Wrist.wrist.set(ControlMode.PercentOutput, down, DemandType.ArbitraryFeedForward,0);
    	}
    	else if(Robot.oi.xbox.getBButtonReleased()==true) {
    		Wrist.wrist.set(ControlMode.PercentOutput, stop, DemandType.ArbitraryFeedForward,0);
    	}
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
