// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1785.Comp18;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PWMTalonSRX;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTainSrightd;
    public static SpeedController driveTainSleftd;
    public static DifferentialDrive driveTainSdrive;
    public static CANTalon clawClawR;
    public static CANTalon clawClawL;
    public static SpeedControllerGroup clawClawZ;
    public static CANTalon wristwrist;
    public static DoubleSolenoid armAirArm;
    public static Solenoid gearShifterAirShifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTainSrightd = new PWMTalonSRX(0);
        LiveWindow.addActuator("DriveTainS", "rightd", (PWMTalonSRX) driveTainSrightd);
        driveTainSrightd.setInverted(false);
        driveTainSleftd = new PWMTalonSRX(1);
        LiveWindow.addActuator("DriveTainS", "leftd", (PWMTalonSRX) driveTainSleftd);
        driveTainSleftd.setInverted(false);
        driveTainSdrive = new DifferentialDrive(driveTainSleftd, driveTainSrightd);
        LiveWindow.addActuator("DriveTainS", "drive", driveTainSdrive);
        driveTainSdrive.setSafetyEnabled(true);
        driveTainSdrive.setExpiration(0.1);
        driveTainSdrive.setMaxOutput(1.0);

        clawClawR = new CANTalon(6);
        LiveWindow.addActuator("Claw", "ClawR", clawClawR);
        
        clawClawL = new CANTalon(3);
        LiveWindow.addActuator("Claw", "ClawL", clawClawL);
        
        clawClawZ = new SpeedControllerGroup(clawClawR, clawClawL  );
        LiveWindow.addActuator("Claw", "ClawZ", clawClawZ);
        
        wristwrist = new CANTalon(4);
        LiveWindow.addActuator("Wrist", "wrist", wristwrist);
        
        armAirArm = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Arm", "AirArm", armAirArm);
        
        gearShifterAirShifter = new Solenoid(0, 0);
        LiveWindow.addActuator("GearShifter", "AirShifter", gearShifterAirShifter);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
